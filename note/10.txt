

雪崩效应
A -> B -> C

防雪崩利器
	Spring Cloud Hystrix
	基于netflix
	
HystrixCommand
	实现服务降级
	fallbackMethod指定降级处理

服务降级
超时
服务熔断

引入hystrix依赖
	spring-cloud-starter-hystrix

开启的注解
	EnableCircuitBreaker
	可以使用SpringCloudApplication注解代替


//指定提示（降级处理），不写走默认
@HystrixCommand(fallbackMethod = "fallback")
@GetMapping("products")
public String getProductList() {
	//dosomething
}

//当接口耗时长时，可以指定耗时时间
HystrixCommand(commandProperties = {
	//超时时间配置（很重要），要看业务时间
	@HystrixProperty(name="timeoutInMilliseconds", value="3000")
})


private String fallback() {
	return "太拥挤了，请稍后再试~";
}

当调用products方法，产生异常（抛出异常或者调用失败）会触发降级（即调用fallback方法）

标注在类上，指定默认的服务降级提示，方法上只需写@HystrixCommand即可
@DefaultProperties(defaultFallback = "defaultFallback")



熔断
circuitBreaker.enabled
circuitBreaker.requestVolumeThreshold
circuitBreaker.sleepWindowInMilliseconds
circuitBreaker.errorThresholdPercentage


yml方式配置超时，注意要在方法上加@HystrixCommand注解
hystrix:
	client:
		# 配置默认超时时间
		default:
			isolation:
				thread:
					timeoutInMilliSeconds: 3000
		# 配置某个方法超时时间
		getProductList: #为commandKey，即方法名
			isolation:
				thread:
					timeoutInMilliSeconds: 3000

feign组件中包含feign-hystrix，无需再次引入依赖
	//开启feign-hystrix
	feign.hystrix.enabled=true
	
	//为product-client指定服务降级，在类上写，指定fallback
	@FeignClient(name="product", fallback=ProductClient.Fallback.class)
	
	//降级处理
	@Component
	static Fallback implements ProductClient {
		//服务降级后对应的方法处理逻辑
	}

当product-client以jar方式被order项目使用时，需要在order的启动类上配置扫描
@ComponentScan(basePackages="com.vic")

//熔断面板
hystrix-dashboard

有可能需要添加acutor


在启动类上添加
@EnableHystrixDashboard









