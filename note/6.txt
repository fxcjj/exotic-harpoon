
1. admin
admin 会自己拉取 Eureka 上注册的 app 信息，主动去注册。
这也是唯一区别之前入门中手动注册的地方，就是 client 端不需要 admin-client 的依赖，
也不需要配置 admin 地址了，一切全部由 admin-server 自己实现。
这样的设计对环境变化很友好，不用改了admin-server后去改所有app 的配置了。
注意：
各项目需要引入依赖
<!-- actuator -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>


2. config
统一配置，即config模块。它也是一个服务，需要注册到eureka上

新建时选择
	discovery
	config server

使用注解标识为配置中心
	@EnableConfigServer

在git上新建一个项目用来存放配置文件

然后把git相关信息配置到config项目resources/application.yml文件

order-b.yml // yml格式
order-b.properties // key/value格式

config server组件有
	server
	client


配置文件命名格式
/{name}-{profiles}.yml
/{label}/{name}-{profiles}.yml

name 表示服务名
profiles 表示环境
label 表示分支

如：
localhost:8080/order-test.yml
localhost:8080/release/order-test.yml

basedir // 配置git拉下来的文件路径,注意安全!生产环境常用!


order项目pom配置
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-config-client</artifactId>
</dependency>

要使用下面这个文件,配置先启动？
bootstrap.yml

config可启动多个实例达到高可用,生产环境部署多个即可


order先去eureka拿到config,再去拿到配置文件
在order的bootstrap.yml中如果未配置eureka地址，则默认找localhost:8761。

// 注意，访问order-a.yml会合并order.yml文件！！！！
order.yml
order-a.yml
order-b.yml


git修改配置文件，调用配置中心的接口/actuator/bus-refresh，注意是post请求，spring cloud bus会
发送消息到MQ中，对应服务订阅，更新本地配置文件。

spring cloud bus依赖
<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-bus-amqp</artifactId>
</dependency>


github的webhooks
natapp工具

basedir有时可以删除




