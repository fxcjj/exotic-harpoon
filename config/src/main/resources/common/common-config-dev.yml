
# Swagger2开关
#swagger2:
#  enable: true

# Health Indicator
# The Config Client supplies a Spring Boot Health Indicator that attempts to load configuration from the Config Server.
# The health indicator can be disabled by setting health.config.enabled=false. The response is also cached for performance reasons.
# The default cache time to live is 5 minutes. To change that value, set the health.config.time-to-live property (in milliseconds).
# 当配置为true时，每隔5分钟分拉取config server信息（INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://127.0.0.1:18020）
health:
  config:
    enabled: true

spring:
  cloud:
    # 负载均衡
    loadbalancer:
      # ribbon负载均衡
      ribbon:
        # 开关
        enabled: true
#    # MQ默认Binder
#    stream:
#      # rabbit 或者 activemq
#      defaultBinder: rabbit
#    bus:
#      trace:
#        enabled: true
#      enabled: true
#  # 设置上传文件大小
#  servlet:
#    multipart:
#      max-file-size: 1024MB
#      max-request-size: 1024MB
#  # 国际化
#  messages:
#    basename: i18n/message
  # RabbitMQ配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /

# feign配置
# 如果未配置default，connectTimeout默认10s，readTimeout默认60s，参考类 feign.Request.Options
# 默认关闭Feign的重试机制
feign:
  client:
    config:
      # feign默认配置，可指定服务名声明相关feign配置
      default:
        # feign接口默认连接超时配置
        connectTimeout: 10000
        # feign接口默认读取超时配置
        readTimeout: 60000
        loggerLevel: full
      # 指定服务的feign配置
  #      producer1:
  #        connectTimeout: 5000
  #        readTimeout: 8000
  #        loggerLevel: full
  hystrix:
    # hystrix断路器开关
    # If true, an OpenFeign client will be wrapped with a Hystrix circuit breaker
    enabled: true
  # feign接口连接超时时间（等于ribbon超时时间+hystrix超时时间）
  #  httpclient:
  #    connection-timeout: 20000
  # feign压缩
  compression:
    # feign请求压缩相关
    request:
      # 压缩开关
      enabled: true
      # The list of supported mime types.
      mime-types: text/html,application/xml,application/json
      # The minimum threshold content size.
      min-request-size: 2048
    # feign响应压缩相关
    response:
      # 压缩开关
      enabled: true

# feign的负载均衡ribbon配置，spring cloud feign 默认开启支持ribbon，开关在spring.cloud.loadbalancer.ribbon.enabled配置
# ribbon的全局配置
ribbon:
  # ribbon请求连接实例的超时时间，默认值2000
  ConnectTimeout: 5000
  # 负载均衡超时处理时间，默认值5000
  ReadTimeout: 10000
  # 同一台实例最大重试次数,不包括首次调用，默认0
  MaxAutoRetries: 0
  # 重试负载均衡其他的实例最大重试次数,不包括首次调用，默认1
  MaxAutoRetriesNextServer: 0
  # 是否所有操作都重试
  OkToRetryOnAllOperations: false

# ribbon的局部配置
# 略

# hystrix的超时时间，开关在feign.hystrix.enabled
hystrix:
  command:
    # default全局有效，service id指定应用有效
    default:
      execution:
        timeout:
          # 如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
          enabled: true
        isolation:
          thread:
            # 断路器超时时间，默认1000ms
            timeoutInMilliseconds: 60000
  # 把监控地址加入proxyStreamAllowList
  dashboard:
    proxy-stream-allow-list: "localhost"

# 各微服务eureka相关配置
eureka:
  client:
    # 开启健康检查
    healthcheck:
      enabled: true
    # 设置实例是否注册到eureka server，默认为true
    register-with-eureka: true
    # Indicates how often(in seconds) to fetch the registry information from the eureka server
    registry-fetch-interval-seconds: 5
    service-url:
      defaultZone: http://${eureka.host:127.0.0.1}:${eureka.port:18010}/eureka
  instance:
    #
    prefer-ip-address: true
    # eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance
    lease-renewal-interval-in-seconds: 3
    # 告知服务端N秒还未收到心跳的话，就将该服务移除列表
    # eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance
    lease-expiration-duration-in-seconds: 10

# 端点配置
management:
  endpoints:
    web:
      exposure:
        # 暴露所有端点
        include: "*"
  endpoint:
    health:
      # 显示健康具体信息，默认不会显示详细信息
      show-details: always

# 日志配置
logging:
  # 日志级别配置
  level:
    # 不输出 Resolving eureka endpoints via configuration
    com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver: warn
    # 不输出 Fetching config from server at : http://ip:port
    org.springframework.cloud.config.client: warn